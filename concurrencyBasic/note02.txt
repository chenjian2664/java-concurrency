
有序性 happens-before原则
程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作
锁定原则：一个unLock操作先行发生于后面对同一个锁的lock操作
volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作
传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出
操作A先行发生于操作C
线程启动原则：Thread的start()方法先行发生于此线程的每一个动作
线程中断原则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到
中断事件的发生
线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过
Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行
对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始


线程安全性-总结
原子性：Atomic包、cas算法、synchronized、lock
可见性：synchronized、volatile
有序性：happends-berfore


发布对象
对象逸出

安全发布对象
在静态初始化函数中初始化一个对象的引用
将对象的引用保存到volatile类型域或者AtomicReference对象中
将对象的引用保存到某个正确构造对象的final类型域中
将对象的引用保存到一个由锁保护的域中


final关键字：类、方法、变量
     修饰类：不能被继承 例：String类
     修饰方法：1、锁定方法不被继承类修改 
     	       2、效率 （内嵌调用）
     修饰变量：基本数据类型变量、引用类型变量

