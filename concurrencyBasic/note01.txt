
cpu 多级缓存

cpu cache有什么意义
1)时间局部性:如果某个数据被访问，那么在不久的将来它很可能被再次访问
2)空间局部性：如果某个数据被访问，那么与它相邻的数据很快也肯能被访问

缓存一致性 MESI
用于保证多个cpu cache之间缓存共享数据的一致性

java内存模型(java Memory Model,JMM)

线程安全性
    定义：
    当多个线程访问某个类时，不管运行时环境采用何种调度方式
    或者这些进程将如何交替执行，并且在主调代码中不需要任何额外的
    同步或者协同，这个类都能表现出正确的行为，那么就称这个类是
    线程安全的

    体现在：
    1.原子性：提供互斥访问，同一时刻只能有一个线程来对它进行操作
    2.可见性：一个线程对主内存的修改可以及时的被其他线程观察到
    3.有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序的
    		存在，该观察结果一般杂乱无序
cas:compareAndSwap 操作 
	Atomic包下 调用Unsafe类下的方法，比如comapreAndSwapInt Long 等等
		具体原理就是将当前需要处理的对象和值传入
		不停的从java native底层方法中取出需要操作对象的值
		与当前对象中保存的值对比是否相同，如果一样那么再进行
		操作
	AtomicInteger AtomicLong incrementAndGet getAndIncrement
	调用Unsafe.compareAndSwapInt Long 等方法底层是do while循环
	java 8新增了 LongAdder 这个类在高并发时效率要优于AtomicLong
	类，但是统计精度不能保证完全正确，有一定误差。因此对于高并发
	数据精度要求不高时优先选择LongAdder。但是比如indexCode这种数据
	必须唯一，对数据精度要求高的情况下不能使用LongAdder，应该使用
	Atomic包下的AtomicLong类

synchronized 
    1.修饰代码块：大括号括起来的代码，作用于调用的对象
    2.修饰方法：整个方法，作用于调用的对象
    3.修饰静态方法：整个静态方法，作用于所有对象
    4.修饰类：括号括起来的部分，作用于所有对象

synchronzied ：不可中断，适合竞争不激烈，可读性好
Lock：可中断锁，多样化同步，竞争激烈时能维持常态
Atomic：竞争激烈时能维持常态，比Lock性能好；只能同步一个值

