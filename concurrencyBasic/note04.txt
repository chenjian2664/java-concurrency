
并发容器：JUC java.util.concurrent

ArrayList --> CopyOnWriteArrayList 数据不大，修改不多情况下使用
HashSet TreeSet ----> CopyOnWriteArraySet ConcurrentSkipListSet
HashMap TreeMap ----> ConcurrentHashMap ConcurrentSkipListMap

 what is skipList ?

 安全共享对象策略

 线程限制：一个线程限制的对象，由线程独占，并且只能被占有它的线程修改

 共享只读：一个共享只读的对象，在没有额外同步的情况下，可以被多个线程并发
 访问，但是任何线程都不能修改它

 线程安全对象：一个线程安全的对象或者容器，在内部通过同步机制在保证线程安全
 	所以其他线程无需额外的同步就可以通过公共接口随意访问它

被守护对象：被守护对象只能通过获取特定的锁来访问

JUC 之 AQS ------> AbstractQueuedSynchronizer
使用Node实现FIFO队列，可以用于构建锁或者其他同步装置的基础框架
利用int类型表示状态
子类通过继承并通过实现它的方法管理其状态{acquire 和 release }的方法操纵状态
可以同时实现排它锁和共享锁模式（独占、共享）

AQS同步组件
CountDownLatch
Semaphore
CyclicBarrier
ReentrantLock
Condition
FutureTask



ReentrantLock 和 synchronized区别
可重入性
锁的实现 synchronized JVM实现 ReentrantLock jdk实现

ReentrantLock独有的功能
    可指定时公平锁还是非公平锁
    提供一个Condition类，可以分组唤醒需要唤醒的线程
    提供能够中断等待锁的线程的机制，lock.lockInterruptibly()
    
锁 先lock 再 unlock unlock可以放在finally代码块中

synchronized不会发生死锁


