
FutureTask

Callable 与 Runnable 接口对比
Future 接口
FutureTask类


线程池
new Thread弊端
    每次new Thread新建对象，性能差
    线程缺乏统一管理，可能无限制的新建线程，相互竞争，有可能占用过多系统
    资源导致死机或oom
    缺少更多功能，如更多执行、定期执行、线程中断

线程池的好处
    重用存在的线程、减少对象创建、消亡的开销，性能佳
    可有效控制最大并发线程数，提高系统资源利用率，同时可以避免过多资源竞争，避免阻塞
    提供定时执行、定期执行、单线程、并发数控制等功能

    ThreadPoolExecutor
   	参数：
	corePoolSize:核心线程数量
	maximumPoolSize:线程最大线程数
	workQueue:阻塞队列，存储等待执行的任务，很重要，会对线程池运行过程
	产生重大影响
	keepAliveTime：线程没有任务执行时最多保持多久时间终止
	unit：keepAliveTime的时间单位
	threadFactory：线程工厂，用来创建线程
	rejectHandler：当拒绝处理任务时的策略


Executors.newCachedThreadPool
Executors.newFixedThreadPool
Executors.newScheduledThreadPool
Executors.newSingleThreadPool


多线程： 
多使用本地变量
使用不可变类
最小化锁的作用域范围
	S = 1/(1-a + a/n)
使用Executor,而不是直接new Thread执行

宁可使用同步也不要 使用线程的wait和notify
使用BlockingQueue实现生产-消费模式
使用并发集合而不是加了锁的同步集合
使用Semaphore创建有界的访问
宁可使用同步代码块，也不使用同步的方法
避免使用静态变量



